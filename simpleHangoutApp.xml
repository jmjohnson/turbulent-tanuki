<?xml version="1.0" encoding="UTF-8" ?>
<Module>
<!-- Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License
-->
<ModulePrefs title="Hangout Starter">
<Require feature="rpc" />
<Require feature="views" />
<Require feature="locked-domain" />
</ModulePrefs>
<Content type="html"><![CDATA[

<html>
<body>
<script src="//plus.google.com/hangouts/_/api/v1/hangout.js"></script>

<h3>Simple Hangout App</h3>

<p>
<input class="button" type="button" value="Dial test" id="dialButton" onClick="dialConference()"/>
</p>

<script>

var bridgeNumber = "8662436264";
function dialConference(bridgeNumber, conferenceNumber) {
  var call = gapi.hangout.telephone.beginCall(bridgeNumber);

  // This will send the required tones and get the call waiting.
  (conferenceNumber + "#").split("").map(function(i){call.sendTone(i)})
}

var CalendarService = function() {
}

calendarService.prototype.CALENDAR_SCOPE = "https://www.googleapis.com/auth/calendar.readonly"
calendarService.prototype.FIELDS = "items(creator(displayName,self),description,gadget,hangoutLink,htmlLink,start),summary";

calendarService.prototype.getToday = function() {
  var date = new Date();
  date.setHours(0,0,0);
  return date
};

calendarService.prototype.getTomorrow = function() {
  var date = new Date();
  date.setHours(0,0,0);
  date.setDate(date.getDate() + 1);
  return date
};

calendarService.prototype.getCandidateMeetings = function() {
  params = {
    calendarId: 'primary',
    q: 'toll-free dial-in number',
    timeMin: this.getToday().toISOString(),
    timeMax: this.getTomorrow().toISOString(),
    fields: this.FIELDS
  }
  request = gapi.client.calendar.events.list(params);

  request.execute(function(response){
    console.log(arguments)
  });


}

function init() {
  var myCal = new CalendarService();
  gapi.client.load('calendar', 'v3', function(){});
  gapi.auth.authorize({scope: calendarService.prototype.CALENDAR_SCOPE});

}

var clientLoaded = function() {
  var hangoutApiPromise = new Promise(function(pass, fail) {
  	gapi.hangout.onApiReady.add(pass);
  });

  var calendarApiPromise = new Promise(function(pass, fail){
  	gapi.client.load('calendar', 'v3')
  });

  var oAuth2Promise = new Promise(function(pass, fail){
  	gapi.auth.authorize({scope: calendarService.prototype.CALENDAR_SCOPE})
  });

  Promise.all([hangoutApiPromise, oAuth2Promise, calendarApiPromise]).then(function(pass,fail){
  	debugger;
  });
}

</script>
<script src="https://apis.google.com/js/client.js?onload=clientLoaded"></script>

</body>

]]>
</Content>
</Module>

